"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTo = addTo;
const nodejs_logging_1 = require("@hmcts/nodejs-logging");
const path = require("path");
const fs = require("fs");
const { merge } = require('lodash');
const log = nodejs_logging_1.Logger.getLogger('applicationRunner');
const defaultOptions = {
    mountPoint: '/mnt/secrets/',
    failOnError: false,
};
function addTo(config, givenOptions) {
    const options = merge({}, defaultOptions, givenOptions || {});
    const mountPoint = options.mountPoint;
    const failOnError = options.failOnError;
    log.info(`Attempting to read properties from volume: '${mountPoint}'`);
    try {
        const prefix = getPrefix(mountPoint.toString());
        const properties = readVaults(mountPoint);
        config[prefix] = merge(config[prefix] || {}, properties);
    }
    catch (error) {
        if (failOnError) {
            throw Error(`properties-volume failed with:'${error}`);
        }
        const localError = error;
        if (localError && localError.code && localError.code === 'ENOENT') {
            log.info("Could not find properties to load, check your config, you can ignore this if you don't expect any");
        }
        else {
            log.info(`Could not read properties from volume: '${mountPoint}' due to '${error}'`);
        }
    }
    return config;
}
function getPrefix(aPath) {
    const prefixFolder = path.basename(aPath);
    if (prefixFolder.length === 0) {
        throw new Error(`Invalid properties mount point supplied: '${aPath}'`);
    }
    return prefixFolder;
}
function addDir(dir, obj, mountPoint) {
    obj[dir] = readDirectories(mountPoint, dir).reduce((values, file) => addFile(values, file, mountPoint, dir), {});
    return obj;
}
function addFile(values, file, mountPoint, dir) {
    const filePath = readFile(mountPoint, dir, file);
    if (filePath) {
        values[file] = filePath.trim();
    }
    return values;
}
function readFile(mountPoint, dir, file) {
    const filePath = mountPoint + '/' + dir + '/' + file;
    if (!fs.statSync(filePath).isDirectory()) {
        return fs.readFileSync(filePath, 'utf8');
    }
}
function readDirectories(mountPoint, dir) {
    return fs.readdirSync(mountPoint + '/' + dir);
}
function readVaults(mountPoint) {
    return fs.readdirSync(mountPoint, null).reduce((obj, dir) => addDir(dir, obj, mountPoint), {});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9wZXJ0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBYUEsc0JBc0JDO0FBbkNELDBEQUErQztBQUMvQyw2QkFBNkI7QUFDN0IseUJBQXlCO0FBRXpCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFcEMsTUFBTSxHQUFHLEdBQUcsdUJBQU0sQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUVsRCxNQUFNLGNBQWMsR0FBWTtJQUM5QixVQUFVLEVBQUUsZUFBZTtJQUMzQixXQUFXLEVBQUUsS0FBSztDQUNuQixDQUFDO0FBRUYsU0FBZ0IsS0FBSyxDQUFDLE1BQVcsRUFBRSxZQUFzQjtJQUN2RCxNQUFNLE9BQU8sR0FBWSxLQUFLLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxZQUFZLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkUsTUFBTSxVQUFVLEdBQWdCLE9BQU8sQ0FBQyxVQUFXLENBQUM7SUFDcEQsTUFBTSxXQUFXLEdBQVksT0FBTyxDQUFDLFdBQVksQ0FBQztJQUVsRCxHQUFHLENBQUMsSUFBSSxDQUFDLCtDQUErQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZFLElBQUksQ0FBQztRQUNILE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNoRCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUNoQixNQUFNLEtBQUssQ0FBQyxrQ0FB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