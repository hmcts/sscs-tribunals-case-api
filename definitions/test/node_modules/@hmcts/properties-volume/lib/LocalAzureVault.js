"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addFromAzureVault = addFromAzureVault;
const identity_1 = require("@azure/identity");
const keyvault_secrets_1 = require("@azure/keyvault-secrets");
const yaml = require("js-yaml");
const nodejs_logging_1 = require("@hmcts/nodejs-logging");
const fs = require("fs");
const { merge } = require('lodash');
const log = nodejs_logging_1.Logger.getLogger('applicationRunner');
async function addFromAzureVault(config, options) {
    const env = options.env || 'aat';
    log.info(`Attempting to read properties from volume: '${options.pathToHelmChart}' using env: '${env}'`);
    if (!options.pathToHelmChart || !fs.existsSync(options.pathToHelmChart)) {
        throw new Error(`helm chart not found at: '${options.pathToHelmChart}'`);
    }
    try {
        const chart = yaml.load(fs.readFileSync(options.pathToHelmChart, 'utf8'));
        const secrets = await readVaultsFromAzure(chart, env);
        config['secrets'] = merge(config['secrets'] || {}, secrets);
        return config;
    }
    catch (error) {
        log.error(error);
        throw Error(`properties-volume failed with: ${error}`);
    }
}
async function readVaultsFromAzure(chart, env) {
    const credential = new identity_1.DefaultAzureCredential();
    const vaultSecrets = deepSearch(chart, 'keyVaults');
    if (!vaultSecrets) {
        throw new Error('No keyVaults found in helm chart');
    }
    const vaultPromises = Object.keys(vaultSecrets).map(vaultName => readVaultFromAzure(vaultSecrets[vaultName], vaultName, env, credential));
    const vaults = await Promise.all(vaultPromises);
    return merge({}, ...vaults);
}
async function readVaultFromAzure(vaultSecrets, vaultName, env, credential) {
    const vaultUri = `https://${vaultName}-${env}.vault.azure.net`;
    const client = new keyvault_secrets_1.SecretClient(vaultUri, credential);
    const chartSecrets = (vaultSecrets === null || vaultSecrets === void 0 ? void 0 : vaultSecrets.secrets) || [];
    const secretPromises = chartSecrets.map(secret => normalizeSecret(secret)).map(secret => loadSecret(client, secret));
    const loadedSecrets = await Promise.all(secretPromises);
    return { [vaultName]: merge({}, ...loadedSecrets) };
}
function deepSearch(obj, key) {
    if (obj.hasOwnProperty(key)) {
        return obj[key];
    }
    for (const k in obj) {
        if (typeof obj[k] === 'object') {
            const result = deepSearch(obj[k], key);
            if (result) {
                return result;
            }
        }
    }
}
function normalizeSecret(secret) {
    return {
        alias: (secret === null || secret === void 0 ? void 0 : secret.alias) || secret,
        name: (secret === null || secret === void 0 ? void 0 : secret.name) || secret,
    };
}
async function loadSecret(client, secret) {
    const secretValue = await client.getSecret(secret.name);
    return { [secret.alias]: secretValue.value };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9jYWxBenVyZVZhdWx0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0xvY2FsQXp1cmVWYXVsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBLDhDQW9CQztBQS9CRCw4Q0FBeUQ7QUFDekQsOERBQXVEO0FBQ3ZELGdDQUFnQztBQUNoQywwREFBK0M7QUFDL0MseUJBQXlCO0FBR3pCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFcEMsTUFBTSxHQUFHLEdBQUcsdUJBQU0sQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUUzQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsTUFBVyxFQUFFLE9BQXFCO0lBQ3hFLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDO0lBRWpDLEdBQUcsQ0FBQyxJQUFJLENBQUMsK0NBQStDLE9BQU8sQ0FBQyxlQUFlLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRXhHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUN4RSxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixPQUFPLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0gsTUFBTSxLQUFLLEdBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMvRSxNQUFNLE9BQU8sR0FBRyxNQUFNLG1CQUFtQixDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztRQUV0RCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEVB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