/**
 * Abstract class.
 * Helpers abstracts test execution backends.
 *
 * Methods of Helper class will be available in tests in `I` object.
 * They provide user-friendly abstracted actions over NodeJS libraries.
 *
 * Hooks (methods starting with `_`) can be used to setup/teardown,
 * or handle execution flow.
 *
 * Methods are expected to return a value in order to be wrapped in promise.
 */
declare class Helper {
    private config;
    private options;
    /**
     *
     * @param {*} config
     */
    constructor(config: any);
    /**
     * Abstract method to provide required config options
     * @return {*}
     * @protected
     */
    static _config(): void;
    /**
     * Abstract method to validate config
     * @param {*} config
     * @returns {*}
     * @protected
     */
    _validateConfig(config: any): any;
    /**
     * Sets config for current test
     * @param {*} opts
     * @protected
     */
    _setConfig(opts: any): void;
    /**
     * Hook executed before all tests
     * @protected
     */
    _init(): void;
    /**
     * Hook executed before each test.
     * @param {Mocha.Test} [test]
     * @protected
     */
    _before(test?: any): void;
    /**
     * Hook executed after each test
     * @param {Mocha.Test} [test]
     * @protected
     */
    _after(test?: any): void;
    /**
     * Hook provides a test details
     * Executed in the very beginning of a test
     *
     * @param {Mocha.Test} test
     * @protected
     */
    _test(test: any): void;
    /**
     * Hook executed after each passed test
     *
     * @param {Mocha.Test} test
     * @protected
     */
    _passed(test: any): void;
    /**
     * Hook executed after each failed test
     *
     * @param {Mocha.Test} test
     * @protected
     */
    _failed(test: any): void;
    /**
     * Hook executed before each step
     *
     * @param {CodeceptJS.Step} step
     * @protected
     */
    _beforeStep(step: any): void;
    /**
     * Hook executed after each step
     *
     * @param {CodeceptJS.Step} step
     * @protected
     */
    _afterStep(step: any): void;
    /**
     * Hook executed before each suite
     *
     * @param {Mocha.Suite} suite
     * @protected
     */
    _beforeSuite(suite: any): void;
    /**
     * Hook executed after each suite
     *
     * @param {Mocha.Suite} suite
     * @protected
     */
    _afterSuite(suite: any): void;
    /**
     * Hook executed after all tests are executed
     *
     * @param {Mocha.Suite} suite
     * @protected
     */
    _finishTest(suite: any): void;
    /**
    * Abstract method to provide common interface to accessing helpers internals inside a test.
    */
    _useTo(description: string, fn: any): any;
    /**
     * Access another configured helper: `this.helpers['AnotherHelper']`
     *
     * @readonly
     * @type {*}
     */
    get helpers(): any;
    /**
     * Print debug message to console (outputs only in debug mode)
     *
     * @param {string} msg
     */
    debug(msg: string): void;
    /**
     * @param {string}  section
     * @param {string}  msg
     */
    debugSection(section: any, msg: string): void;
}
export = Helper;
