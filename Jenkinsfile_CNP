#!groovy
properties([
        [$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/tribunals-case-api'],
        pipelineTriggers([[$class: 'GitHubPushTrigger']])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GithubAPI
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "sscs"
def component = "tribunals-api"
def dmnBranch = "master"
def waStandaloneBranch = "master"

def gradleBuilder = new GradleBuilder(this, product)

def secrets = [
    'sscs-${env}'      : [
        secret('idam-api', 'IDAM_API_URL'),
        secret('idam-oauth-user', 'IDAM_OAUTH2_CLIENT_ID'),
        secret('idam-redirect', 'IDAM_OAUTH2_REDIRECT_URL'),
        secret('idam-sscs-systemupdate-user', 'IDAM_SSCS_SYSTEMUPDATE_USER'),
        secret('idam-sscs-systemupdate-password', 'IDAM_SSCS_SYSTEMUPDATE_PASSWORD'),
        secret('idam-sscs-oauth2-client-secret', 'IDAM_OAUTH2_CLIENT_SECRET'),
        secret('idam-s2s-api', 'IDAM_S2S_AUTH'),
        secret('ccd-api', 'CORE_CASE_DATA_API_URL'),
        secret('ccd-jid', 'CORE_CASE_DATA_JURISDICTION_ID'),
        secret('ccd-tid', 'CORE_CASE_DATA_CASE_TYPE_ID'),
        secret('sscs-s2s-secret', 'IDAM_S2S_AUTH_TOTP_SECRET'),
        secret('s2s-micro', 'IDAM_S2S_AUTH_MICROSERVICE'),
        secret('docmosis-endpoint', 'PDF_SERVICE_CONVERT_URL'),
        secret('docmosis-api-key', 'PDF_SERVICE_ACCESS_KEY'),
        secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
        secret('robotics-email-from', 'ROBOTICS_EMAIL_FROM'),
        secret('robotics-email-to', 'ROBOTICS_EMAIL_TO'),
        secret('robotics-email-scottish-to', 'ROBOTICS_EMAIL_SCOTTISH_TO'),
        secret('robotics-email-pip-ae-to', 'ROBOTICS_EMAIL_PIP_AE_TO'),
        secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
    ],
    's2s-${env}'      : [
            secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
            secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
            secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
    ],
    'ccd-${env}'      : [
            secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
            secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
            secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET')
    ]
]

def secretsForPR = [
        'sscs-${env}'      : [
                secret('idam-api', 'IDAM_API_URL'),
                secret('idam-oauth-user', 'IDAM_OAUTH2_CLIENT_ID'),
                secret('idam-redirect', 'IDAM_OAUTH2_REDIRECT_URL'),
                secret('idam-sscs-systemupdate-user', 'IDAM_SSCS_SYSTEMUPDATE_USER'),
                secret('idam-sscs-systemupdate-password', 'IDAM_SSCS_SYSTEMUPDATE_PASSWORD'),
                secret('idam-sscs-oauth2-client-secret', 'IDAM_OAUTH2_CLIENT_SECRET'),
                secret('idam-s2s-api', 'IDAM_S2S_AUTH'),
                secret('sscs-s2s-secret', 'IDAM_S2S_AUTH_TOTP_SECRET'),
                secret('s2s-micro', 'IDAM_S2S_AUTH_MICROSERVICE'),
                secret('docmosis-endpoint', 'PDF_SERVICE_CONVERT_URL'),
                secret('docmosis-api-key', 'PDF_SERVICE_ACCESS_KEY'),
                secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
                secret('sscs-servicebus-connection-string-tf', 'SERVICE_BUS_CONNECTION_STRING'),
                secret('preview-ccd-db-password-2', 'PREVIEW_DB_PASSWORD_2'),
                secret('preview-shared-db-password', 'SHARED_DB_PASSWORD')
        ],
        's2s-${env}'      : [
                secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
                secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
                secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
        ],
        'ccd-${env}'      : [
                secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
                secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
                secret('idam-data-store-system-user-password', 'IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
                secret('idam-data-store-system-user-username', 'IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
                secret('idam-data-store-client-secret', 'IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET')
        ],
        'wa-${env}'      : [
                secret('app-insights-connection-string', 'WA_INSIGHT_CONNECTION_STRING'),
                secret('ld-secret', 'WA_LAUNCH_DARKLY_SDK_KEY'),
                secret('s2s-secret-case-event-handler', 'S2S_SECRET_CASE_EVENT_HANDLER'),
                secret('s2s-secret-task-management-api', 'S2S_SECRET_TASK_MANAGEMENT_API'),
                secret('s2s-secret-task-monitor', 'S2S_SECRET_TASK_MONITOR'),
                secret('s2s-secret-workflow-api', 'S2S_SECRET_WORKFLOW_API'),
                secret('wa-idam-client-secret', 'WA_IDAM_CLIENT_SECRET'),
                secret('wa-system-username', 'WA_SYSTEM_USERNAME'),
                secret('wa-system-password', 'WA_SYSTEM_PASSWORD')
        ],
        'am-${env}'      : [
                secret('am-role-assignment-service-s2s-secret', 'AM_ROLE_ASSIGNMENT_SERVICE_SECRET')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline(type, product, component) {
    def githubApi = new GithubAPI(this)
    if (env.BRANCH_NAME.startsWith("PR")) {
        loadVaultSecrets(secretsForPR)
        env.PREVIEW_CCD_ENABLED = true
        env.CASE_TYPE = "Benefit"
        env.CORE_CASE_DATA_API_URL = "http://sscs-tribunals-api-pr-${CHANGE_ID}-ccd-data-store-api"
        env.CCD_GW_API = "http://sscs-tribunals-api-pr-${CHANGE_ID}-ccd-api-gw"
        for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "enable_hearings") ) {
            env.PREVIEW_CCD_ENABLED = false
            env.CASE_TYPE = "Benefit-${CHANGE_ID}"
            env.CORE_CASE_DATA_API_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
            env.CCD_GW_API = "https://gateway-ccd.aat.platform.hmcts.net"
        }
    } else {
        loadVaultSecrets(secrets)
    }
    enableSlackNotifications('#sscs-tech')
    enableAksStagingDeployment()
    disableLegacyDeployment()
    syncBranchesWithMaster(branchesToSync)

    afterSuccess('akschartsinstall'){
        // Vars needed for AKS testing
        env.TEST_DOCUMENT_MANAGEMENT_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
        env.DOCUMENT_MANAGEMENT_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
        env.CORE_CASE_DATA_API_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
        env.CASE_DOCUMENT_AM_URL = "http://ccd-case-document-am-api-aat.service.core-compute-aat.internal"
        env.PREVIEW_BRANCH_WITH_LOCAL_CCD = false;
        if (env.BRANCH_NAME.startsWith("PR") ) {
            for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "pr-values:ccd") ) {
                env.CORE_CASE_DATA_API_URL = "https://ccd-data-store-api-sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
                println """After akschartsinstall Using CORE_CASE_DATA_API_URL: ${env.CORE_CASE_DATA_API_URL}""".stripIndent()
                env.PREVIEW_BRANCH_WITH_LOCAL_CCD = true;
            }
            for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "enable_hearings") ) {
                env.CORE_CASE_DATA_API_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
                env.PREVIEW_BRANCH_WITH_LOCAL_CCD = false;
            }
            for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "pr-values:wa") ) {
                env.CORE_CASE_DATA_API_URL = "https://ccd-data-store-api-sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
                env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
                env.CAMUNDA_BASE_URL = "https://camunda-sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
                println """After akschartsinstall Using CORE_CASE_DATA_API_URL: ${env.CORE_CASE_DATA_API_URL}""".stripIndent()
                sh """
                ./bin/pull-camunda-dmn-files.sh ${dmnBranch}
                ./bin/pull-camunda-bpmn-files.sh ${waStandaloneBranch}
                ./bin/import-camunda-files.sh . sscs sscs
                """
                env.PREVIEW_BRANCH_WITH_LOCAL_CCD = true;
            }
        }
        println """After akschartsinstall Using CORE_CASE_DATA_API_URL: ${env.CORE_CASE_DATA_API_URL}. - The branch name is ${env.BRANCH_NAME}""".stripIndent()
    }

    env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
    onMaster() {
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }
    onPR() {
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
                        //Disabling due to IDAM OIDC issue. To be investigated under SSCS-10377
                      //AppPipelineDsl.PactRoles.CONSUMER_DEPLOY_CHECK])

        env.ENVIRONMENT = "pr"
        for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "pr-values:ccd") ) {
            enableHighLevelDataSetup()
        }
    }
    onMaster {
        env.ENVIRONMENT="aat"
        enableHighLevelDataSetup()
    }
    onDemo {
        env.ENVIRONMENT = "demo"
        enableHighLevelDataSetup()
    }
    onPerftest {
        env.ENVIRONMENT = "perftest"
        enableHighLevelDataSetup()
    }
    onIthc {
        env.ENVIRONMENT = "ithc"
        enableHighLevelDataSetup()
    }

    before('highleveldatasetup') {
        if (env.ENVIRONMENT != "pr") {
            env.DEFINITION_STORE_URL_BASE = "http://ccd-definition-store-api-${env.ENVIRONMENT}.service.core-compute-${env.ENVIRONMENT}.internal"
        } else {
            env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
        }
        generateDefinitions()
    }

    afterSuccess('smoketest:preview') {
        env.TEST_E2E_URL_WEB = params.URL_TO_TEST
        env.TEST_E2E_API_URI = params.TRIBUNALS_API_URI

         stage('Playwright tests') {

             if(githubApi.getLabelsbyPattern(env.BRANCH_NAME, "dependencies")) {
                 echo "Don't run functional test"
              } else {
                  try{
                    echo "attempting to run e2e tests on PREVIEW"
                    sh './gradlew YarnInstall'
                    if(params.HEARINGS_LABEL_ENABLED == 'No'){
                        sh './gradlew runE2eTestsPreview'
                    } else {
                        sh './gradlew runE2eTestsPreviewHearings'
                    }
                } finally {
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: "playwright-report",
                        reportFiles: 'index.html',
                        reportName: 'SSCS E2E Test Report'
            ])
                steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**/*'
                }
              }
        }
            
    }

    afterSuccess('smoketest:aat') {
        stage('Playwright tests') {
            try{
                echo "attempting to run e2e tests on AAT"
                sh './gradlew yarnInstall'
                sh './gradlew runE2eTestsAat'
            } finally {
                publishHTML([
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: "playwright-report",
                    reportFiles: 'index.html',
                    reportName: 'SSCS E2E Test Report'
            ])
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'playwright-report/**/*'
            }
        }
    }

    afterAlways('functionalTest:aat') {
        env.ENVIRONMENT="prod"
    }
}

def generateDefinitions() {
    sh "./bin/create-xlsx.sh benefit tag ${env.ENVIRONMENT}"
    sh "./bin/create-xlsx.sh bulkscan tag ${env.ENVIRONMENT}"
    steps.archiveArtifacts artifacts: "definitions/benefit/*.xlsx"
    steps.archiveArtifacts artifacts: "definitions/bulkscan/*.xlsx"
}
