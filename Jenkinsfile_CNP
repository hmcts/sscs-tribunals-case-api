#!groovy
properties([
        [$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/tribunals-case-api'],
        pipelineTriggers([[$class: 'GitHubPushTrigger']])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GithubAPI
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "sscs"
def component = "tribunals-api"
def dmnBranch = "master"
def waStandaloneBranch = "master"

def gradleBuilder = new GradleBuilder(this, product)

def secrets = [
    'sscs-${env}'      : [
        secret('idam-api', 'IDAM_API_URL'),
        secret('idam-oauth-user', 'IDAM_OAUTH2_CLIENT_ID'),
        secret('idam-redirect', 'IDAM_OAUTH2_REDIRECT_URL'),
        secret('idam-sscs-systemupdate-user', 'IDAM_SSCS_SYSTEMUPDATE_USER'),
        secret('idam-sscs-systemupdate-password', 'IDAM_SSCS_SYSTEMUPDATE_PASSWORD'),
        secret('idam-sscs-oauth2-client-secret', 'IDAM_OAUTH2_CLIENT_SECRET'),
        secret('idam-s2s-api', 'IDAM_S2S_AUTH'),
        secret('ccd-api', 'CORE_CASE_DATA_API_URL'),
        secret('ccd-jid', 'CORE_CASE_DATA_JURISDICTION_ID'),
        secret('ccd-tid', 'CORE_CASE_DATA_CASE_TYPE_ID'),
        secret('sscs-s2s-secret', 'IDAM_S2S_AUTH_TOTP_SECRET'),
        secret('s2s-micro', 'IDAM_S2S_AUTH_MICROSERVICE'),
        secret('docmosis-endpoint', 'PDF_SERVICE_CONVERT_URL'),
        secret('docmosis-api-key', 'PDF_SERVICE_ACCESS_KEY'),
        secret('robotics-email-from', 'ROBOTICS_EMAIL_FROM'),
        secret('robotics-email-to', 'ROBOTICS_EMAIL_TO'),
        secret('robotics-email-scottish-to', 'ROBOTICS_EMAIL_SCOTTISH_TO'),
        secret('robotics-email-pip-ae-to', 'ROBOTICS_EMAIL_PIP_AE_TO'),

        // tya notifications
        secret('notification-key', 'NOTIFICATION_API_KEY'),
        secret('notification-test-key', 'NOTIFICATION_API_TEST_KEY'),
        secret('sscs-email-mac-secret-text', 'EMAIL_MAC_SECRET_TEXT'),
        secret('tya-link', 'SSCS_TRACK_YOUR_APPEAL_LINK'),
        secret('evidence-share-topic-shared-access-key', 'AMQP_PASSWORD'),

        // Used by Kubernetes
        secret('idam-s2s-api', 'IDAM_S2S_AUTH'),
        secret('sscs-s2s-secret', 'IDAM_S2S_AUTH_TOTP_SECRET'),

        // e2es
        secret('test-e2e-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
        secret('test-e2e-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
        secret('test-e2e-hmc-caseofficer-username', 'TEST_HMC_CASEOFFICER_USERNAME'),
        secret('test-e2e-hmc-caseofficer-password', 'TEST_HMC_CASEOFFICER_PASSWORD'),
        secret('test-e2e-judge-username', 'TEST_JUDGE_USERNAME'),
        secret('test-e2e-judge-password', 'TEST_JUDGE_PASSWORD'),
        secret('test-e2e-salaried-judge-username', 'TEST_SALARIED_JUDGE_USERNAME'),
        secret('test-e2e-salaried-judge-password', 'TEST_SALARIED_JUDGE_PASSWORD'),
        secret('test-e2e-fee-paid-judge-username', 'TEST_FEE_PAID_JUDGE_USERNAME'),
        secret('test-e2e-fee-paid-judge-password', 'TEST_FEE_PAID_JUDGE_PASSWORD'),
        secret('test-e2e-dwp-username', 'TEST_DWP_USERNAME'),
        secret('test-e2e-dwp-password', 'TEST_DWP_PASSWORD'),
        secret('test-e2e-am-tcw-username', 'TEST_AM_TRIBUNAL_CASEWORKER_USERNAME'),
        secret('test-e2e-am-tcw-password', 'TEST_AM_TRIBUNAL_CASEWORKER_PASSWORD'),
        secret('test-e2e-am-caseofficer-case-allocator-username', 'TEST_AM_CASEOFFICER_CASE_ALLOCATOR_USERNAME'),
        secret('test-e2e-am-caseofficer-case-allocator-password', 'TEST_AM_CASEOFFICER_CASE_ALLOCATOR_PASSWORD'),
        secret('test-e2e-hmrc-username', 'TEST_HMRC_USERNAME'),
        secret('test-e2e-hmrc-password', 'TEST_HMRC_PASSWORD'),
        secret('test-e2e-am-regional-center-admin-username', 'TEST_AM_REGIONAL_CENTER_ADMIN_USERNAME'),
        secret('test-e2e-am-regional-center-admin-password', 'TEST_AM_REGIONAL_CENTER_ADMIN_PASSWORD'),
        secret('test-e2e-am-regional-center-team-leader-username', 'TEST_AM_REGIONAL_CENTER_TEAM_LEADER_USERNAME'),
        secret('test-e2e-am-regional-center-team-leader-password', 'TEST_AM_REGIONAL_CENTER_TEAM_LEADER_PASSWORD'),


        secret('test-e2e-am-caseofficer-username', 'TEST_AM_CASEOFFICER_USERNAME'),
        secret('test-e2e-am-caseofficer-password', 'TEST_AM_CASEOFFICER_PASSWORD'),
        secret('test-e2e-caseofficer-username', 'TEST_AM_SUPERUSER_USERNAME'),
        secret('test-e2e-caseofficer-password', 'TEST_AM_SUPERUSER_PASSWORD'),
        secret('test-e2e-superuser-username', 'SUPER_USER_USERNAME'),
        secret('test-e2e-superuser-password', 'SUPER_USER_PASSWORD'),
        secret('idam-sscs-oauth2-client-secret', 'IDAM_OAUTH2_CLIENT_SECRET'),
        secret('idam-redirect', 'IDAM_OAUTH2_REDIRECT_URL'),
        secret('test-e2e-am-senior-tcw-case-allocator-username', 'TEST_AM_SENIOR_TRIBUNAL_CASEWORKER_CASE_ALLOCATOR_USERNAME'),
        secret('test-e2e-am-senior-tcw-case-allocator-password', 'TEST_AM_SENIOR_TRIBUNAL_CASEWORKER_CASE_ALLOCATOR_PASSWORD')

    ],
    's2s-${env}'      : [
            secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
            secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
            secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
    ],
    'ccd-${env}'      : [
            secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
            secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
            secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

def branchesToSync = ['demo', 'ithc', 'perftest']

withPipeline(type, product, component) {
    def githubApi = new GithubAPI(this)
    if (env.BRANCH_NAME.startsWith("PR")) {
        env.PREVIEW_CCD_ENABLED = true
        env.CASE_TYPE = "Benefit"
        env.CORE_CASE_DATA_API_URL = "http://sscs-tribunals-api-pr-${CHANGE_ID}-ccd-data-store-api"
        env.CCD_GW_API = "http://sscs-tribunals-api-pr-${CHANGE_ID}-ccd-api-gw"
        for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "enable_hearings") ) {
            env.PREVIEW_CCD_ENABLED = false
            env.CASE_TYPE = "Benefit-${CHANGE_ID}"
            env.CORE_CASE_DATA_API_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
            env.CCD_GW_API = "https://gateway-ccd.aat.platform.hmcts.net"
        }
    }

    loadVaultSecrets(secrets)
    enableSlackNotifications('#sscs-tech')
    enableAksStagingDeployment()
    disableLegacyDeployment()
    syncBranchesWithMaster(branchesToSync)

    afterSuccess('akschartsinstall') {
        // Vars needed for AKS testing
        env.TEST_DOCUMENT_MANAGEMENT_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
        env.DOCUMENT_MANAGEMENT_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
        env.CORE_CASE_DATA_API_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
        env.CASE_DOCUMENT_AM_URL = "http://ccd-case-document-am-api-aat.service.core-compute-aat.internal"
        env.PREVIEW_BRANCH_WITH_LOCAL_CCD = false;
        if (env.BRANCH_NAME.startsWith("PR") ) {
            for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "pr-values:ccd") ) {
                env.CORE_CASE_DATA_API_URL = "https://ccd-data-store-api-sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
                println """After akschartsinstall Using CORE_CASE_DATA_API_URL: ${env.CORE_CASE_DATA_API_URL}""".stripIndent()
                env.PREVIEW_BRANCH_WITH_LOCAL_CCD = true;
            }
            for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "enable_hearings") ) {
                env.CORE_CASE_DATA_API_URL = "http://ccd-data-store-api-aat.service.core-compute-aat.internal"
                env.PREVIEW_BRANCH_WITH_LOCAL_CCD = false;
            }
            for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "pr-values:wa") ) {
                env.CORE_CASE_DATA_API_URL = "https://ccd-data-store-api-sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
                env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
                env.CAMUNDA_BASE_URL = "https://camunda-sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
                println """After akschartsinstall Using CORE_CASE_DATA_API_URL: ${env.CORE_CASE_DATA_API_URL}""".stripIndent()
                sh """
                ./bin/pull-camunda-dmn-files.sh ${dmnBranch}
                ./bin/pull-camunda-bpmn-files.sh ${waStandaloneBranch}
                ./bin/import-camunda-files.sh . sscs sscs
                """
                env.PREVIEW_BRANCH_WITH_LOCAL_CCD = true;
            }
        }
        println """After akschartsinstall Using CORE_CASE_DATA_API_URL: ${env.CORE_CASE_DATA_API_URL}. - The branch name is ${env.BRANCH_NAME}""".stripIndent()
    }

    onMaster() {
        env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
        enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }

    onPR() {
        env.ENVIRONMENT = "pr"
        for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "pr-values:ccd") ) {
            enableHighLevelDataSetup()
        }
        env.IDAM_URL='https://idam-api.aat.platform.hmcts.net'
        env.S2S_URL='http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
        env.IDAM_OAUTH2_CLIENT_ID='sscs'
        env.HEARINGS_ENABLED = params.HEARINGS_LABEL_ENABLED
    }
    onMaster {
        env.ENVIRONMENT="aat"
        enableHighLevelDataSetup()
    }
    onDemo {
        env.ENVIRONMENT = "demo"
        enableHighLevelDataSetup()
    }
    onPerftest {
        env.ENVIRONMENT = "perftest"
        enableHighLevelDataSetup()
    }
    onIthc {
        env.ENVIRONMENT = "ithc"
        enableHighLevelDataSetup()
    }

    before('highleveldatasetup') {
        if (env.ENVIRONMENT != "pr") {
            env.DEFINITION_STORE_URL_BASE = "http://ccd-definition-store-api-${env.ENVIRONMENT}.service.core-compute-${env.ENVIRONMENT}.internal"
        } else {
            env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
        }
        generateDefinitions()
    }

    afterSuccess('highleveldatasetup:preview') {
        env.TEST_E2E_URL_WEB = "https://xui-sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
        env.TEST_E2E_API_URI = "https://sscs-tribunals-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"         
        env.TEST_E2E_NUM_BROWSERS = params.NUM_TESTS_IN_PARALLEL
        env.TEST_E2E_WAIT_FOR_ANGULAR = 'false'
        env.TEST_E2E_FAIL_FAST = 'false'
        env.TEST_E2E_ANNOTATION = params.PREVIEW_TAG
        env.TEST_E2E_RETRIES = 5
        env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
        stage('Playwright tests') {
            env.ENVIRONMENT="preview"
            runE2eTests()
        }
    }

    afterSuccess('smoketest:aat') {
        stage('Playwright tests') {
            runE2eTests()
        }
    }

    afterAlways('functionalTest:aat') {
        env.ENVIRONMENT="prod"
    }
}

def generateDefinitions() {
    sh "./bin/create-xlsx.sh benefit tag ${env.ENVIRONMENT}"
    sh "./bin/create-xlsx.sh bulkscan tag ${env.ENVIRONMENT}"
    steps.archiveArtifacts artifacts: "definitions/benefit/*.xlsx"
    steps.archiveArtifacts artifacts: "definitions/bulkscan/*.xlsx"
}

def runE2eTests() {
    try {
        sh './gradlew YarnInstall'
        if (params.HEARINGS_LABEL_ENABLED == 'No') {
            sh './gradlew runE2eTests'
        } else {
            sh './gradlew runE2eTestsHearings'
        }
    } finally {
        publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'SSCS E2E Test Report'
        ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'definitions/test/playwright-report/**'
    }
}