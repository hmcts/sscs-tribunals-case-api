buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.3.8")
    }
}

plugins {
    id 'application'
    id 'pmd'
    id 'org.sonarqube' version '2.8'
    id 'jacoco'
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'uk.gov.hmcts.java' version '0.12.2'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'net.ltgt.apt' version '0.21'
    id "info.solidsoft.pitest" version '1.5.2'
    id 'org.owasp.dependencycheck' version '6.0.3'
    id 'au.com.dius.pact' version '4.1.10'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'uk.gov.hmcts.reform'
version = '1.0.0'

sourceCompatibility = 11
targetCompatibility = 11

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked"
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

mainClassName = 'uk.gov.hmcts.reform.sscs.TribunalsCaseApiApplication'

pmd {
    toolVersion = "6.5.0"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/IntegrationTests/java')
        }
        resources {
            srcDir('src/IntegrationTests/resources')
        }
    }
    e2e {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/e2e/java')
        }
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

dependencies {
    integrationTestCompile(sourceSets.test.output)
    e2eCompile(sourceSets.test.output)
}

task integration(type: Test) {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

task functional(type: Test) {
    useJUnitPlatform()
    group = 'Functional Tests'
    description = 'Executes non-destructive functional tests in AAT against a running CCD and notification service'
    setTestClassesDirs(sourceSets.e2e.output.classesDirs)
    setClasspath(sourceSets.e2e.runtimeClasspath)
    include "uk/gov/hmcts/reform/sscs/functional/**"
    exclude "uk/gov/hmcts/reform/sscs/smoke/**"
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all {
            def isNonStable = { String version ->
                def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
                def regex = /^[0-9,.v-]+(-r)?$/
                return !stableKeyword && !(version ==~ regex)
            }
            if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                selection.reject('Release candidate')
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    suppressionFile = 'dependency-check-suppressions.xml'
}

repositories {

    maven {
        url "https://dl.bintray.com/hmcts/hmcts-maven"
    }

    maven {
        url 'https://repo.spring.io/libs-milestone'
    }

    jcenter()
    mavenCentral()

    // jitpack should be last resort
    // see: https://github.com/jitpack/jitpack.io/issues/1939
    maven { url 'https://jitpack.io' }
    mavenLocal()
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
check.dependsOn integration
checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleTest)
integration.shouldRunAfter(checkstyleIntegrationTest)
integration.shouldRunAfter(test)

sonarqube {
    properties {
        property "sonar.projectName", "SSCS - Tribunals Case Api"
        property "sonar.projectKey", "SSCSTCA"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", "**/CreateCaseException.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/domain/**," +
                "src/main/java/uk/gov/hmcts/reform/sscs/TribunalsCaseApiApplication.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/email/Email.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/config/*," +
                "src/main/java/uk/gov/hmcts/reform/sscs/model/**/*.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/service/EvidenceUploadService.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/service/OnlineHearingService.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/service/pdf/data/EvidenceDescriptionPdfData.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/service/pdf/StoreAppellantStatementService.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/service/pdf/StorePdfService.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/service/coversheet/PdfCoverSheet.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/controllers/CreateCaseController.java," +
                "src/main/java/uk/gov/hmcts/reform/sscs/service/pdf/data/PdfData.java"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

configurations {
    integrationTestCompile.extendsFrom(testCompile)
    integrationTestRuntime.extendsFrom(testRuntime)
    e2eCompile.extendsFrom(testCompile)
    e2eRuntime.extendsFrom(testRuntime)
    contractTestCompile.extendsFrom(testCompile)
    contractTestRuntime.extendsFrom(testRuntime)
}


def versions = [
        reformLogging: '5.1.5',
        springfoxSwagger: '2.8.0',
        pitest: '1.3.2',
        gradlePitest: '1.3.0',
        sonarPitest: '0.5',
        pact: '3.5.24',
]

ext["rest-assured.version"] = '4.2.0'

ext {
    springCloudVersion = 'Hoxton.SR9'
}

dependencyManagement {
    dependencies {
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
        dependency group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
        dependency group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.14.0'
        // resolves: CVE-2020-9489
        dependency group: 'org.apache.tika', name: 'tika-core', version: '1.24.1'

        // resolves: CVE-2019-10101, CVE-2019-10102, CVE-2019-10103, CVE-2020-15824
        dependencySet(group: 'org.jetbrains.kotlin', version: '1.4.10') {
            entry 'kotlin-stdlib'
            entry 'kotlin-stdlib-common'
            entry 'kotlin-stdlib-jdk8'
            entry 'kotlin-stdlib-jdk7'
            entry 'kotlin-reflect'
        }
	// CVE-2020-13934, CVE-2020-13935
        dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.39') {
          entry 'tomcat-embed-core'
          entry 'tomcat-embed-el'
          entry 'tomcat-embed-websocket'
	}

        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group in ['com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
                details.useVersion '2.11.0'
            }
        }
    }
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
    compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.0'
    compile group: 'com.google.guava', name: 'guava', version: '30.0-jre'
    compile group: 'org.elasticsearch', name: 'elasticsearch', version: '7.10.0'

    compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'

    // Added to fix CVE-2020-13934, CVE-2020-13935
    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.39'
    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.39'
    compile group: 'org.apache.tomcat', name: 'tomcat-annotations-api', version: '9.0.39'

    // Safe to remove once Spring update their dependencies - see CVE-2019-14439 and add 'com.fasterxml.jackson.core' configurations.all above
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.3'

    compile group: 'net.objectlab.kit', name: 'datecalc-jdk8', version: '1.4.2'

    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

    compile group: 'io.github.openfeign', name: 'feign-httpclient', version: '10.0.1'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.9.0'

    compile group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4'
    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'
    compile group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'doc-assembly-client', version: '1.0.6'
    compile group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '7.0.0'

    compile group: 'uk.gov.hmcts.reform', name: 'sscs-common', version: '4.1.2'
    compile group: 'uk.gov.hmcts.reform', name: 'sscs-pdf-email-common', version: '1.4.15'

    testCompile group: 'io.rest-assured', name: 'rest-assured'

    compile 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.14'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.3.5.RELEASE'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.6.0'
    testCompile group: 'net.javacrumbs.json-unit', name: 'json-unit', version: '2.21.0'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.6.0'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testCompile group: 'net.javacrumbs.json-unit', name: 'json-unit-fluent', version: '2.21.0'
    testCompile group: 'io.github.artsok', name: 'rerunner-jupiter', version: '2.1.6'

    // Added to fix CVE-2020-13934, CVE-2020-13935
    testCompile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.39'
    testCompile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.39'
    testCompile group: 'org.apache.tomcat', name: 'tomcat-annotations-api', version: '9.0.39'

    testCompile 'pl.pragmatists:JUnitParams:1.1.1'

    testCompileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor "org.projectlombok:lombok:1.18.14"
    e2eCompile 'org.projectlombok:lombok:1.18.16'
    e2eAnnotationProcessor "org.projectlombok:lombok:1.18.8"

    testCompile "org.junit.jupiter:junit-jupiter-api:5.7.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.6.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"

    //pact contract testing
    contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact
    contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact

    contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.7.0")
    contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.6.1")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.6.2')

    contractTestCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.27') {
        force = true
    }

    contractTestCompile sourceSets.main.runtimeClasspath
    contractTestCompile sourceSets.test.runtimeClasspath
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

pact {
    publish {
        pactDirectory = 'target/pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = project.pactVersion
    }
}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

bootJar {
    archiveName 'tribunals-case-api.jar'
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.enabled = true
        csv.enabled = false
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.sscs.*']
    excludedClasses = ['uk.gov.hmcts.reform.sscs.config.*','uk.gov.hmcts.reform.sscs.models.*','uk.gov.hmcts.reform.sscs.TribunalsCaseApiApplication.java']
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 50
}

task smoke(type: Test) {
    group = 'verification'
    description = 'Executes non-destructive smoke tests against a running Tribual Case API'
    setTestClassesDirs(sourceSets.e2e.output.classesDirs)
    setClasspath(sourceSets.e2e.runtimeClasspath)
    include "uk/gov/hmcts/reform/sscs/smoke/**"
    exclude "uk/gov/hmcts/reform/sscs/functional/**"
}

task contract(type: Test, description: 'Runs the pact contract tests.', group: 'Verification') {
    description = "Runs the consumer Pact tests"
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
}

run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006']
    }
}
